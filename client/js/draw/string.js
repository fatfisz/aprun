/*
 * APRun
 * https://github.com/fatfisz/aprun
 *
 * Copyright (c) 2015 FatFisz
 * Licensed under the MIT license.
 */

'use strict';

var { context } = require('../utils');


var letters = {
  a: [[1, 1, 1], [1, 0, 1], [1, 1, 1], [1, 0, 1], [1, 0, 1]],
  c: [[1, 1, 1], [1, 0, 0], [1, 0, 0], [1, 0, 0], [1, 1, 1]],
  e: [[1, 1, 1], [1, 0, 0], [1, 1, 0], [1, 0, 0], [1, 1, 1]],
  g: [[1, 1, 1], [1, 0, 0], [1, 0, 1], [1, 0, 1], [1, 1, 1]],
  h: [[1, 0, 1], [1, 0, 1], [1, 1, 1], [1, 0, 1], [1, 0, 1]],
  i: [[1], [1], [1], [1], [1]],
  n: [[1, 0, 0, 1], [1, 1, 0, 1], [1, 0, 1, 1], [1, 0, 0, 1], [1, 0, 0, 1]],
  o: [[1, 1, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 1, 1]],
  r: [[1, 1, 1], [1, 0, 1], [1, 1, 1], [1, 1, 0], [1, 0, 1]],
  s: [[1, 1, 1], [1, 0, 0], [1, 1, 1], [0, 0, 1], [1, 1, 1]],
  t: [[1, 1, 1], [0, 1, 0], [0, 1, 0], [0, 1, 0], [0, 1, 0]],
  u: [[1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 0, 1], [1, 1, 1]],
  y: [[1, 0, 1], [1, 0, 1], [1, 1, 1], [0, 1, 0], [0, 1, 0]],
  1: [[0, 0, 1], [0, 1, 1], [0, 0, 1], [0, 0, 1], [0, 0, 1]],
  2: [[1, 1, 0], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 1, 1]],
  3: [[1, 1, 0], [0, 0, 1], [0, 1, 0], [0, 0, 1], [1, 1, 0]],
  4: [[1, 0, 0], [1, 0, 0], [1, 0, 1], [1, 1, 1], [0, 0, 1]],
  5: [[1, 1, 1], [1, 0, 0], [1, 1, 0], [0, 0, 1], [1, 1, 0]],
  6: [[0, 1, 0], [1, 0, 0], [1, 1, 0], [1, 0, 1], [0, 1, 0]],
  7: [[1, 1, 1], [0, 0, 1], [0, 0, 1], [0, 1, 0], [0, 1, 0]],
  8: [[0, 1, 0], [1, 0, 1], [0, 1, 0], [1, 0, 1], [0, 1, 0]],
  9: [[0, 1, 0], [1, 0, 1], [0, 1, 1], [0, 0, 1], [0, 1, 0]],
  0: [[0, 1, 0], [1, 0, 1], [1, 0, 1], [1, 0, 1], [0, 1, 0]],
  ' ': [[0, 0], [0, 0], [0, 0], [0, 0], [0, 0]],
  '.': [[0], [0], [0], [0], [1]],
  ':': [[0], [1], [0], [1], [0]],
  '?': [[1, 1, 1], [0, 0, 1], [0, 1, 0], [0, 0, 0], [0, 1, 0]],
  '%': [[1, 0, 1], [0, 0, 1], [0, 1, 0], [1, 0, 0], [1, 0, 1]],
};

function drawLetter(_x, _y, char, scale) {
  var pixels = letters[char];

  pixels.forEach((row, y) => {
    row.forEach((pixel, x) => {
      if (pixel) {
        context.rect(_x + x * scale, _y + y * scale, scale, scale);
      }
    });
  });
}

function measure(s, scale) {
  return [].reduce.call(s, (acc, char, i) => {
    return acc + letters[char][0].length + Math.min(i, 1);
  }, 0) * scale;
}

exports.draw = (_x, _y, s, scale, color, align) => {
  var x = _x;
  var y = Math.floor(_y);

  switch (align) {
    case 'center':
      x -= measure(s, scale) / 2;
      break;
    case 'right':
      x -= measure(s, scale);
      break;
  }

  x = Math.floor(x);

  var offset = 0;

  context.beginPath();
  for (var i = 0, ii = s.length; i < ii; i += 1) {
    drawLetter(x + offset * scale, y, s[i], scale);
    offset += 1 + letters[s[i]][0].length;
  }
  context.fillStyle = color;
  context.fill();
};
